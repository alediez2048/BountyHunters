Initial project setup for Truck Driver Communication System

- Added .cursor.json with comprehensive development guidelines including:
  - Project structure rules for RESTful API design
  - MongoDB and Mongoose best practices with indexing and error handling
  - Telegram Bot implementation standards
  - Async/Promise handling patterns
  - Error handling, security, and logging standards
  - Performance optimization guidelines
  - AI message processing and location handling best practices

- Created complete project structure:
  - src/api: For RESTful API endpoints and controllers
  - src/bot: For Telegram bot handlers
  - src/models: For MongoDB schema definitions
  - src/services: For business logic implementation
  - src/utils: For utility functions
  - config: For configuration files
  - tests: For unit and integration tests
  - docker: For containerization

- Implemented core application files:
  - src/index.js: Main application entry point with Express setup, MongoDB connection, and error handling
  - src/utils/logger.js: Structured logging utility with request ID tracking and different log levels
  - src/api/routes.js: RESTful API routes for deliveries, users, and webhook handling
  - src/api/controllers/deliveryController.js: Controller with proper error handling and HTTP status codes
  - src/services/deliveryService.js: Service layer with business logic separated from controllers
  - src/models/Delivery.js: Mongoose schema with geospatial indexing, validation, and lifecycle hooks

- Added project configuration:
  - package.json: With all required dependencies and scripts
  - .gitignore: For excluding node_modules, logs, and environment files
  - .env.example: Template for environment variables
  - Updated README.md: With comprehensive project documentation, user journeys, and setup instructions 